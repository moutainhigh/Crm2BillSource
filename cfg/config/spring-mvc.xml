<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:spring-zext-web="http://www.asiainfo-linkage.com/schema/spring-zext-web"
    xmlns:spring-zext-service="http://www.asiainfo-linkage.com/schema/spring-zext-service"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"   
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx"   
	xsi:schemaLocation="
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd 
        http://www.asiainfo-linkage.com/schema/spring-zext-web http://www.asiainfo-linkage.com/schema/spring-zext-web.xsd
        http://www.asiainfo-linkage.com/schema/spring-zext-service http://www.asiainfo-linkage.com/schema/spring-zext-service.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd 
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 对标注 @Autowired 的 Bean 进行自动注入初始化bean的时候会自动装载 -->  
	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
	<bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor" />
    <mvc:annotation-driven>
    	<mvc:message-converters register-defaults="true">  
		    <bean class="org.springframework.http.converter.StringHttpMessageConverter">  
		      <constructor-arg value="UTF-8" />  
		    </bean>  
		  </mvc:message-converters>  
    </mvc:annotation-driven>
	<context:annotation-config/>
	<context:component-scan base-package="com.al.nppm">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/html;charset=UTF-8</value>
						</list>
					</property>
				</bean>
				<bean
					class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>application/json;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- set the max upload size100MB -->
		<property name="maxUploadSize">
			<value>104857600</value>
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
	</bean>
    <!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException --> 
	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->
				<prop
					key="org.springframework.web.multipart.MaxUploadSizeExceededException">error_fileupload</prop>
				<prop key="com.al.nppm.common.exception.AiException"></prop>  
			</props>
		</property>
	</bean>
	
	<!-- 注册解析注解的处理器  -->
	<aop:config proxy-target-class="true"></aop:config>
	<aop:aspectj-autoproxy/>
<!-- 	<bean class="com.al.nppm.business.common.service.StartAddDataListener"/> -->

	<context:component-scan base-package="com.al.nppm.business.common.service" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
    </context:component-scan>
	<!-- 处理资料 -->
	<bean id="fileTaskJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
<!-- 			指定要定时执行的方法所在类，将定时任务定义成bean -->
			<ref bean="crmUserService" />
		</property>
		<property name="targetMethod">
<!-- 			指定定时执行的方法 -->
			<value>runTask</value>
		</property>
		<!--  
		<property name="group">
		<value>file</value> DEFAULT
		</property>
		 -->
		<property name="concurrent">
<!-- 			指定目标封装为有状态的任务，有状态的任务不能并发执行，无状态的任务可并发执行 -->
			<value>false</value>
		</property>
		<property name="arguments">
		 <list> 
		 <!-- 
		    <value>3</value> custId取模数
		    <value>0</value> 取模结果值
		    <value></value> regionId
		    <value></value> proc_flag
		     -->
		 </list> 
		</property>		
	</bean> 	
<!-- 	定义触发时间 -->
    <bean id="doTime" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail">
            <ref bean="fileTaskJob" />
        </property>
        <property name="cronExpression">
				<value>*/10 * * * * ?</value>
        </property>
    </bean> 

	<!--  处理信息点  -->
    <bean id="dataSynTaskJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
	<!-- 			指定要定时执行的方法所在类，将定时任务定义成bean -->
			<ref bean="dataSynJob" />
		</property>
		<property name="targetMethod">
	<!-- 			指定定时执行的方法 -->
			<value>task</value>
		</property>
	</bean>	
	<!-- 	定义触发时间 -->
    <bean id="dataSynDoTime" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail">
            <ref bean="dataSynTaskJob" />
        </property>
        <property name="cronExpression">
			<value>0 30 * * * ? </value>
        </property>
    </bean>

	<!-- 一次性费用 -->
	<bean id="itemTaskJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<!-- 指定要定时执行的方法所在类，将定时任务定义成bean -->
			<ref bean="crmUserService" />
		</property>
		<property name="targetMethod">
			<!-- 指定定时执行的方法 -->
			<value>oneItemrunTask</value>
		</property>
		<property name="concurrent">
			<!-- 指定目标封装为有状态的任务，有状态的任务不能并发执行，无状态的任务可并发执行 -->
			<value>false</value>
		</property>
	</bean> 
    <bean id="doItemTime" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail">
            <ref bean="itemTaskJob" />
        </property>
        <property name="cronExpression">
				<value>0/30 * * * * ?</value>
        </property>
    </bean> 
    
    
    <!-- 重发消息 -->
    <bean id="sendMsgTaskJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="crmUserService" />
		</property>
		<property name="targetMethod">
			<value>reSendMsg</value>
		</property>
		<property name="concurrent">
			<value>false</value>
		</property>
	</bean>	
    <bean id="sendMsgTime" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail">
            <ref bean="sendMsgTaskJob" />
        </property>
        <property name="cronExpression">
				<value>0 */5 * * * ?</value>
        </property>
    </bean>
    
    <!-- 扫描数据库配置的定时任务  -->
    <bean id="scanTaskJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="taskService" />
		</property>
		<property name="targetMethod">
			<value>scanTask</value>
		</property>
		<property name="concurrent">
			<value>false</value>
		</property>
	</bean>	
    <bean id="scanTaskTime" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail">
            <ref bean="scanTaskJob" />
        </property>
        <property name="cronExpression">
				<value>*/30 * * * * ?</value>
        </property>
    </bean>
	
<!-- 	启动工作 -->
<!-- 	总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序  -->
   <bean id="sfb" lazy-init="true" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="doTime" />   
<!--   				<ref bean="dataSynDoTime" />   -->
 			<!-- 	<ref bean="doItemTime" />  --> 
 			<!--    <ref bean="sendMsgTime"/> -->
 			 <!-- 	<ref bean="scanTaskTime"/>  -->
			</list>
		</property>
	</bean>  
	
	<bean id="taskcfg" lazy-init="true" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	</bean>
	<!--德鲁伊配置-->
	<!-- 引入配置文件 -->
	<import resource="spring-druid.xml" />
</beans>